


#include <iostream>

using namespace std;

struct Node{
    
    
    int data;
    
    struct Node * next;
    
};


void linkedlist(struct Node*ptr){
    
    
    while(ptr!=NULL){
        
        cout<<"element " <<ptr->data<<endl;
        
        ptr= ptr->next;
       
        
    }
}

 struct Node * deletefirst(struct Node*head){
     
     struct Node*ptr=head;
     
     head=head->next;
     
     free(ptr);
     return head;
     
     
 }
    
    struct Node*deleteAtindex(struct Node*head,int index){
        struct Node*p=head;
        struct Node*q=p->next;
        
        for(int i=0;i<index-1;i++){
            
            p=p->next;
            
            q=q->next;
            
        }
        
        p->next=q->next;
        
    free(q);
    return head;
    
        
        
        
    }
    
    struct Node*deletelast(struct Node *head){
        
        struct Node*p=head;
        struct Node*q=p->next;
        while(q->next!=NULL){
            
            p=p->next;
            q=q->next;
            
        }
        
      
        p->next=NULL;
        free(q);
        return head;
        
    }
    
    struct Node*deleteAtvalue(struct Node*head,int value){
        struct Node*p=head;
        
        struct Node*q=head->next;
        
        while(q->data!=value && q->next!=NULL){
            
            p=p->next;
            q=q->next;
             
            
            
        }
        if(q->data==value){
        p->next=q->next;
        free(q);
        }
        return head;
        
        
    }
// struct Node*insertfirst(struct Node*head, int data){
//     struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
    
//     ptr->next=head;
//     ptr->data=data;
    
//      return ptr;
    
// }



    
    


// struct Node*insertAtindex(struct Node*head,int data ,int index){
//     struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
    
//     struct Node*p=head;
//     int i=0;
    
//     while(i!=index-1){
        
//         p=p->next;
//         i++;
        
//     }
    
//     ptr->data=data;
//     ptr->next=p->next;
//     p->next=ptr;
//     return head;
    
    
    
// }



// struct Node*insertAtend(struct Node *head, int data){
//     struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
//      ptr->data=data;
//      struct Node*p=head;
     
//   while(p->next!=NULL){
       
//       p=p->next;
         
       
//   }
   
//   p->next=ptr;
//   ptr->next=NULL;
//   return head;
   
   
    
    
// }

// struct Node*insertafterNode(struct Node*head,struct Node*previousNode, int data){
//     struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
//   ptr->data=data;
//     ptr->next=previousNode->next;
    
//     previousNode->next=ptr;
//      return head;
    
// }



int main()
{
    struct Node*head;
    struct Node*secound;
    struct Node*third;
    struct Node*fourth;
    
    head=(struct Node*)malloc(sizeof(struct Node));
    secound=(struct Node*)malloc(sizeof(struct Node));
    third=(struct Node*)malloc(sizeof(struct Node));
    fourth=(struct Node*)malloc(sizeof(struct Node));
    
    head->data=7;
    head->next=secound;
    
    secound->data=77;
    secound->next=third;
    
    third->data=55;
    third->next=fourth;
    
    fourth->data=200;
    
    fourth->next=NULL;
    
    
    linkedlist(head);
    
    // insertAtindex(head,69,1);
    
    // head =insertfirst(head,99);
    // insertAtend(head,65);
//   insertafterNode(head,secound,3); 
    
//     linkedlist(head);

//head=deletefirst(head); 
// head=deleteAtindex(head, 1);
// head=deletelast(head);
head=deleteAtvalue(head, 55);


  linkedlist(head);

    
    

    return 0;
}

